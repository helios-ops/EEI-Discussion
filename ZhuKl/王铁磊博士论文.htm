<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=gb2312">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:CMR12;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
h1
	{mso-style-link:"标题 1 Char";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:150%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Times New Roman",serif;
	font-weight:normal;}
h2
	{mso-style-link:"标题 2 Char";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:150%;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;
	font-weight:normal;}
h3
	{mso-style-link:"标题 3 Char";
	margin-top:13.0pt;
	margin-right:0cm;
	margin-bottom:13.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:173%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-link:"页眉 Char";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:center;
	text-indent:10.0pt;
	layout-grid-mode:char;
	border:none;
	padding:0cm;
	font-size:9.0pt;
	font-family:"Times New Roman",serif;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-link:"页脚 Char";
	margin:0cm;
	margin-bottom:.0001pt;
	text-indent:10.0pt;
	layout-grid-mode:char;
	font-size:9.0pt;
	font-family:"Times New Roman",serif;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:21.0pt;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
span.1Char
	{mso-style-name:"标题 1 Char";
	mso-style-link:"标题 1";
	font-family:"Times New Roman",serif;}
span.2Char
	{mso-style-name:"标题 2 Char";
	mso-style-link:"标题 2";
	font-family:"Times New Roman",serif;}
span.3Char
	{mso-style-name:"标题 3 Char";
	mso-style-link:"标题 3";
	font-weight:bold;}
span.Char
	{mso-style-name:"页眉 Char";
	mso-style-link:页眉;
	font-family:"Times New Roman",serif;}
span.Char0
	{mso-style-name:"页脚 Char";
	mso-style-link:页脚;
	font-family:"Times New Roman",serif;}
.MsoChpDefault
	{font-family:"Calibri",sans-serif;}
 /* Page Definitions */
 @page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.0pt 54.0pt 72.0pt 54.0pt;
	layout-grid:16.3pt;}
div.WordSection1
	{page:WordSection1;}
-->
</style>

</head>

<body lang=ZH-CN style='text-justify-trim:punctuation'>

<div class=WordSection1 style='layout-grid:16.3pt'>

<h1 align=center style='text-align:center'><b><span style='font-family:宋体'>面向二进制程序的漏洞挖掘关键技术研究</span></b></h1>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体'>主要贡献：</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US>1. </span><span
style='font-family:宋体'>首次提出校验和（</span><span lang=EN-US>checksum</span><span
style='font-family:宋体'>）感知的模糊测试方法。（第四章）</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='font-family:"CMR12",serif;color:black'>2. </span><span style='font-family:
宋体;color:black'>提出了一种基于</span><span style='color:black'> </span><span
lang=EN-US style='font-family:"CMR12",serif;color:black'>roBDD</span><span
style='font-family:宋体;color:black'>的离线细颗粒度污点分析方法。（第二章）</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='font-family:"CMR12",serif;color:black'>3. </span><span style='font-family:
宋体;color:black'>为进一步提高模糊测试的挖掘效率，提出了一种基于细颗粒度污点分析</span><span style='color:black'>
</span><span lang=EN-US style='font-family:"CMR12",serif;color:black'>(Fine-grained
Taint Analysis)</span><span style='font-family:宋体;color:black'>的导向性样本生成方法。（第五章）</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='font-family:"CMR12",serif;color:black'>4. </span><span style='font-family:
宋体;color:black'>为进一步加强模糊测试的安全分析能力，提出了一种基于混合符号执行</span><span style='color:black'>
</span><span lang=EN-US style='font-family:"CMR12",serif;color:black'>(Conclic
Execution)</span><span style='font-family:宋体;color:black'>的智能样本生成方法。（第五章）</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='font-family:"CMR12",serif;color:black'>5. </span><span style='font-family:
宋体;color:black'>提出了一种面向脆弱性包络</span><span style='color:black'> </span><span
lang=EN-US style='font-family:"CMR12",serif;color:black'>(Vulnerable Component)</span><span
style='font-family:宋体;color:black'>的整数溢出漏洞静态挖掘方法。（第六章）</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='font-family:"CMR12",serif;color:black'>6. </span><span style='font-family:
宋体;color:black'>设计实现了软件安全漏洞动态挖掘系统</span><span style='color:black'> </span><span
lang=EN-US style='font-family:"CMR12",serif;color:black'>TaintScope</span><span
style='font-family:宋体;color:black'>和整数溢出漏洞静态挖掘系统</span><span style='color:black'>
</span><span lang=EN-US style='font-family:"CMR12",serif;color:black'>IntScope</span><span
style='font-family:宋体;color:black'>。</span></p>

<h1><b><span style='font-family:宋体'>第一章</span> </b><b><span style='font-family:
宋体'>绪论</span></b></h1>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体'>二进制程序漏洞挖掘的重要意义。</span></p>

<h2><span style='font-family:宋体'>漏洞挖掘研究现状</span></h2>

<p class=MsoNormal align=center style='text-align:center;text-indent:24.0pt'><span
lang=EN-US><img width=432 height=241 id="图片 1" src="王铁磊博士论文.files/image001.jpg"></span></p>

<p class=MsoNormal align=center style='text-align:center;text-indent:24.0pt'><span
style='font-family:宋体;color:black'>漏洞发现技术概览</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>被动挖掘：基于攻击分析、基于补丁分析</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='font-family:"CMR12",serif;color:black'>1. </span><span style='font-family:
宋体;color:black'>基于蜜罐、蜜网捕获攻击样本是攻击分析的基础手段。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='font-family:"CMR12",serif;color:black'>2. </span><span style='font-family:
宋体;color:black'>基于补丁分析的漏洞发现技术主要依赖于软件开发方发布的补丁信息，进而定位和恢复被修补的漏洞信息。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>主动挖掘：手工漏洞发现、静态漏洞挖掘、动态漏洞挖掘</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>手工漏洞发现：</span><span lang=EN-US style='font-family:"CMR12",serif;
color:black'>1973.</span><span style='font-family:宋体;color:black'>缺陷假设法</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>静态漏洞挖掘：简单模式对比阶段、数据流分析阶段、</span><span style='font-family:宋体;
color:black'>自动机可描述漏洞模式、复杂数据约束关系模式（静态符号执行）</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>动态漏洞挖掘：</span><span style='font-family:宋体;color:black'>事件空间遍历、输入空间遍历（</span><span
lang=EN-US style='font-family:"CMR12",serif;color:black'>Fuzzing</span><span
style='font-family:宋体;color:black'>）、程序执行路径遍历</span></p>

<h1><b><span style='font-family:宋体'>第二章</span> </b><b><span style='font-family:
宋体'>基于</span><span lang=EN-US> roBDD</span></b><b><span style='font-family:
宋体'>的细颗粒度污点分析技术</span></b></h1>

<h2><span style='font-family:宋体'>针对问题</span></h2>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体'>细粒度污点分析面临内存消耗、性能低的问题。</span></p>

<h2><span style='font-family:宋体'>解决方法</span></h2>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体'>提出一种基于有序二元决策图（</span><span
lang=EN-US>roBDD</span><span style='font-family:宋体'>）的细颗粒度污点分析技术，实现了离线污点分析系统</span><span
lang=EN-US>TaintReplayer</span><span style='font-family:宋体'>。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US><img width=554
height=146 id="图片 2" src="王铁磊博士论文.files/image002.jpg"></span></p>

<p class=MsoNormal align=center style='text-align:center;text-indent:24.0pt'><span
lang=EN-US style='font-family:"CMR12",serif;color:black'>TaintReplayer</span><span
style='font-family:宋体;color:black'>系统架构</span></p>

<h2><span style='font-family:宋体'>实验设计</span></h2>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体'>与基于</span><span
lang=EN-US>STL</span><span style='font-family:宋体'>的</span><span lang=EN-US>bitset</span><span
style='font-family:宋体'>的污点分析系统进行对比试验，选择两个目标程序：</span><span lang=EN-US>Adobe
Acrobat</span><span style='font-family:宋体'>和</span><span lang=EN-US>Google
Picasa</span><span style='font-family:宋体'>分析一副</span><span lang=EN-US>PNG</span><span
style='font-family:宋体'>图片。</span></p>

<h2><span style='font-family:宋体'>实验结果</span></h2>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US>TaintReplayer</span><span
style='font-family:宋体'>内存需求少，分析效率高。</span></p>

<h1><b><span style='font-family:宋体'>第三章</span> </b><b><span style='font-family:
宋体'>面向二进制程序的混合符号执行技术</span></b></h1>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>本章无创新点，介绍符号执行技术的原理、发展历史，分析符号执行技术的不足。结合二进制程序分析的需求，介绍一种面向二进制程序的混合符号执行技术的设计与实现。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>符号执行面临难题：</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>1.</span><span style='font-family:宋体;color:black'>对硬件性能要求高</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>2.</span><span style='font-family:宋体;color:black'>处理递归调用、循环很难确定其执行次数</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>3.</span><span style='font-family:宋体;color:black'>调用第三方库无法模拟执行</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>4.</span><span style='font-family:宋体;color:black'>处理矢量数据（数组、字符串）存在困难</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>面向源码的符号执行</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>面向二进制的符号执行困难：缺乏大量信息；低级指令语义复杂；程序执行轨迹包含指令数目庞大。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>两个重要技术选择：在线</span><span lang=EN-US style='color:black'>vs</span><span
style='font-family:宋体;color:black'>离线；底层指令系统</span><span lang=EN-US
style='color:black'>vs</span><span style='font-family:宋体;color:black'>中间代码</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>在线符号执行问题：导致目标程序性能严重下降；基于二进制代码植入技术，复杂；分析并行程序困难。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>设计实现了面向二进制的离线混合符号执行系统</span><span lang=EN-US style='color:black'>SymReplayer</span></p>

<p class=MsoNormal align=center style='text-align:center;text-indent:24.0pt'><span
lang=EN-US><img width=205 height=217 id="图片 3" src="王铁磊博士论文.files/image003.jpg"></span></p>

<p class=MsoNormal align=center style='text-align:center;text-indent:24.0pt'><span
lang=EN-US style='color:black'>SymReplayer</span><span style='font-family:宋体;
color:black'>设计架构：轨迹执行模块、指令翻译模块、混合符号执行模块</span></p>

<h1><b><span style='font-family:宋体'>第四章</span> </b><b><span style='font-family:
宋体'>校验和感知的模糊测试技术</span></b></h1>

<h2><span style='font-family:宋体'>针对问题</span></h2>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>基于校验和机制的数据完整性检查成为传统模糊测试系统的重要障碍</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>传统的畸形数据（测试用例）的生成方法可以分为两类：基于变异和基于规范</span></p>

<h2><span style='font-family:宋体'>解决方法</span></h2>

<p class=MsoNormal><span style='font-family:宋体;color:black'>提出了一种校验和感知的模糊测试方法。解决办法的核心思想是禁用程序中对输入数据进行完整性检测，强制目标程序接收这些畸形数据。修复畸形数据的校验和。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>核心问题：如何自动定位程序中校验和监测点、如何自动修复畸形数据中校验和。</span></p>

<p class=MsoNormal align=center style='text-align:center;text-indent:24.0pt'><span
lang=EN-US><img width=526 height=77 id="图片 4" src="王铁磊博士论文.files/image004.jpg"></span></p>

<p class=MsoNormal align=center style='text-align:center;text-indent:24.0pt'><span
style='font-family:宋体;color:black'>校验和感知的模糊测试流程图</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>校验和检测检测特征：高污点依赖度；行为差异；无负效应。</span></p>

<p class=MsoNormal align=center style='text-align:center;text-indent:24.0pt'><span
lang=EN-US><img width=343 height=201 id="图片 5" src="王铁磊博士论文.files/image005.jpg"></span></p>

<p class=MsoNormal align=center style='text-align:center;text-indent:24.0pt'><span
style='font-family:宋体;color:black'>校验和检测点行为示意图</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>校验和检测：</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>1.</span><span style='font-family:宋体;color:black'>识别正常样本高污点依赖度分支。</span><span
lang=EN-US style='color:black'>P1</span><span style='font-family:宋体;color:black'>：所有正常样本都发生跳转的语句，</span><span
lang=EN-US style='color:black'>P0</span><span style='font-family:宋体;color:black'>：都不跳转。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>2.</span><span style='font-family:宋体;color:black'>识别畸形样本高污点依赖度分支。</span><span
lang=EN-US style='color:black'>P1’</span><span style='font-family:宋体;
color:black'>：所有畸形样本都发生跳转的语句，</span><span lang=EN-US style='color:black'>p0’</span><span
style='font-family:宋体;color:black'>：都不跳转。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>3.</span><span style='font-family:宋体;color:black'>定位程序执行差异点：</span><span
lang=EN-US><img width=120 height=15 id="图片 6" src="王铁磊博士论文.files/image006.jpg"></span><span
style='font-family:宋体;color:black'>。正常与畸形样本总是不同的分支。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>4.</span><span style='font-family:宋体;color:black'>识别校验和域。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>二进制修改和模糊测试。在校验和监测点执行时，如果正常样本一直跳转，则条件跳转改为直接跳转；如果一直不跳转则条件跳转改为</span><span
lang=EN-US style='color:black'>nop</span><span style='font-family:宋体;
color:black'>。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>校验和自动修复：将畸形数据的校验和部分作为符号值，收集执行轨迹上的约束，在校验和位置进行求解，并对畸形样本进行修复。</span></p>

<h2><span style='font-family:宋体'>实验设计</span></h2>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>1.</span><span style='font-family:宋体;color:black'>流程有效性检验</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>目标程序：</span><span lang=EN-US style='color:black'>Picasa</span><span
style='font-family:宋体;color:black'>、</span><span lang=EN-US style='color:black'>Acrobat</span><span
style='font-family:宋体;color:black'>、</span><span lang=EN-US style='color:black'>Snort</span><span
style='font-family:宋体;color:black'>、</span><span lang=EN-US style='color:black'>Tcpdump</span><span
style='font-family:宋体;color:black'>、</span><span lang=EN-US style='color:black'>ClamAV</span><span
style='font-family:宋体;color:black'>、</span><span lang=EN-US style='color:black'>GNU
Tar</span><span style='font-family:宋体;color:black'>、</span><span lang=EN-US
style='color:black'>objcopy</span><span style='font-family:宋体;color:black'>、</span><span
lang=EN-US style='color:black'>Open-vcdiff</span><span style='font-family:宋体;
color:black'>，这些程序使用了</span><span lang=EN-US style='color:black'>CRC</span><span
style='font-family:宋体;color:black'>、</span><span lang=EN-US style='color:black'>TCP/IP</span><span
style='font-family:宋体;color:black'>、</span><span lang=EN-US style='color:black'>MD5</span><span
style='font-family:宋体;color:black'>、</span><span lang=EN-US style='color:black'>Tar</span><span
style='font-family:宋体;color:black'>、</span><span lang=EN-US style='color:black'>Hex</span><span
style='font-family:宋体;color:black'>、</span><span lang=EN-US style='color:black'>Adler32</span><span
style='font-family:宋体;color:black'>多种不同的校验和算法。</span></p>

<h2><span style='font-family:宋体'>实验结果</span></h2>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体'>发现</span><span
lang=EN-US>TaintScope</span><span style='font-family:宋体'>可以有效的运行，时间消耗在可接受范围内。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>2.</span><span style='font-family:宋体;color:black'>漏洞挖掘</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>在</span><span lang=EN-US style='font-family:"CMR12",serif;
color:black'>Adob e Flash Player</span><span style='font-family:宋体;color:black'>、</span><span
style='color:black'> </span><span lang=EN-US style='font-family:"CMR12",serif;
color:black'>CamlImage</span><span style='font-family:宋体;color:black'>、</span><span
lang=EN-US style='color:black'> wxWidgets</span><span style='font-family:宋体;
color:black'>、</span><span style='color:black'> </span><span lang=EN-US
style='font-family:"CMR12",serif;color:black'>Dillo</span><span
style='font-family:宋体;color:black'>等软件中发现了多个零日安全漏洞。而</span><span lang=EN-US
style='color:black'>FIlefuzz 8</span><span style='font-family:宋体;color:black'>小时未发现。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>&nbsp;</span></p>

<h1><b><span style='font-family:宋体'>第五章</span> </b><b><span style='font-family:
宋体'>反馈式畸形样本生成技术研究</span></b></h1>

<h2><span style='font-family:宋体'>针对问题</span></h2>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>传统模糊测试随即修改，盲目、效率低。</span></p>

<p class=MsoNormal align=center style='text-align:center;text-indent:24.0pt'><span
lang=EN-US><img width=363 height=181 id="图片 7" src="王铁磊博士论文.files/image007.jpg"></span></p>

<h2><span style='font-family:宋体'>解决方法</span></h2>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>导向性样本生成，核心思想是识别正常样本中的安全敏感数据后，针对性地修改这些字节生成畸形样本，进而使用这些畸形样本对目标程序进行测试。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>1.</span><span style='font-family:宋体;color:black'>基于细粒度污点分析的导向性样本生成技术</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>根据先验确定敏感操作（如内存分配，</span><span lang=EN-US style='color:black'>strcpy</span><span
style='font-family:宋体;color:black'>等函数），将安全相关数据改为畸形</span><span lang=EN-US
style='color:black'>/</span><span style='font-family:宋体;color:black'>边界值</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>2.</span><span style='font-family:宋体;color:black'>基于混合符号执行的样本生成技术</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>问题：当前混合符号执行效率低，无法应对大型应用程序。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>TaintScope</span><span style='font-family:宋体;color:black'>做法：在混合符号执行过程中，仅把安全相关数据视为符号值，而对其他输入数据使用真实值。</span></p>

<h2><span style='font-family:宋体'>实验及结果</span></h2>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>1.</span><span style='font-family:宋体;color:black'>安全相关数据识别能力</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体'>实验设计：</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>目标程序：</span><span lang=EN-US style='color:black'>Acrobat</span><span
style='font-family:宋体;color:black'>、</span><span lang=EN-US style='color:black'>Picasa</span><span
style='font-family:宋体;color:black'>以及</span><span lang=EN-US style='color:black'>ImageMaic</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>输入：各种常见的图片，</span><span lang=EN-US style='color:black'>PBG</span><span
style='font-family:宋体;color:black'>、</span><span lang=EN-US style='color:black'>BMP</span><span
style='font-family:宋体;color:black'>、</span><span lang=EN-US style='color:black'>JPEG</span><span
style='font-family:宋体;color:black'>等</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>实验结果：几分钟可以处理一张图片（数千字节），识别安全相关数据</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>2.</span><span style='font-family:宋体;color:black'>混合符号执行能力</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>实验设计：</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>目标程序：</span><span lang=EN-US style='color:black'>Adobe Flash
Player</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>输入：</span><span lang=EN-US style='color:black'>4 PNG</span><span
style='font-family:宋体;color:black'>和</span><span lang=EN-US style='color:black'>4
JEPG</span><span style='font-family:宋体;color:black'>生成</span><span lang=EN-US
style='color:black'>8</span><span style='font-family:宋体;color:black'>个</span><span
lang=EN-US style='color:black'>SWF</span><span style='font-family:宋体;
color:black'>文件</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>实验结果：</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>完成一个执行轨迹符号执行大约</span><span lang=EN-US style='color:black'>3</span><span
style='font-family:宋体;color:black'>小时，</span><span lang=EN-US style='color:
black'>8</span><span style='font-family:宋体;color:black'>个需要</span><span
lang=EN-US style='color:black'>24</span><span style='font-family:宋体;color:black'>小时。发现了</span><span
lang=EN-US style='color:black'>3</span><span style='font-family:宋体;color:black'>个</span><span
lang=EN-US style='color:black'>Adobe Flash Player</span><span style='font-family:
宋体;color:black'>的</span><span lang=EN-US style='color:black'>0 day</span><span
style='font-family:宋体;color:black'>。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>漏洞发现能力：发现了包括</span><span lang=EN-US style='color:black'>Microsoft</span><span
style='font-family:宋体;color:black'>、</span><span lang=EN-US style='color:black'>Adobe</span><span
style='font-family:宋体;color:black'>、</span><span lang=EN-US style='color:black'>Google</span><span
style='font-family:宋体;color:black'>等多个产品的</span><span lang=EN-US
style='color:black'>30</span><span style='font-family:宋体;color:black'>个严重安全漏洞。</span></p>

<h1><b><span style='font-family:宋体'>第六章</span> </b><b><span style='font-family:
宋体'>二进制程序整数溢出漏洞检测技术研究</span></b></h1>

<h2><span style='font-family:宋体'>针对问题</span></h2>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>当前静态分析误报率高</span></p>

<h2><span style='font-family:宋体'>解决方法</span></h2>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>提炼总结整数溢出漏洞模型，进而提出一种面向脆弱性包络的整数溢出漏洞检测技术。</span></p>

<h3><span style='font-family:宋体'>・整数溢出漏洞建模</span></h3>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>整数溢出漏洞的程序路径特征：调用污点数据引入函数；对污点数据不恰当检查；将溢出结果用于敏感操作</span></p>

<p class=MsoNormal align=center style='text-align:center;text-indent:24.0pt'><span
lang=EN-US><img width=374 height=192 id="图片 8" src="王铁磊博士论文.files/image008.jpg"></span></p>

<p class=MsoNormal align=center style='text-align:center;text-indent:24.0pt'><span
style='font-family:宋体;color:black'>整数溢出漏洞模型</span></p>

<h3><span style='font-family:宋体'>・面向脆弱性包络的整合溢出漏洞挖掘技术</span></h3>

<p class=MsoNormal align=center style='text-align:center;text-indent:24.0pt'><span
lang=EN-US><img width=254 height=309 id="图片 9" src="王铁磊博士论文.files/image009.jpg"></span></p>

<p class=MsoNormal align=center style='text-align:center;text-indent:24.0pt'><span
lang=EN-US style='color:black'>IntScope</span><span style='font-family:宋体;
color:black'>架构</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>脆弱性包络提取、符号执行、惰性检查策略</span></p>

<h2><span style='font-family:宋体'>实验设计</span></h2>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>1.</span><span style='font-family:宋体;color:black'>分析了</span><span
lang=EN-US style='color:black'>Windows</span><span style='font-family:宋体;
color:black'>操作系统的动态链接库</span><span lang=EN-US style='color:black'>Gdi32.dll</span><span
style='font-family:宋体;color:black'>和</span><span lang=EN-US style='color:black'>Comctl32.dll</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US
style='color:black'>2.</span><span style='font-family:宋体;color:black'>分析了多个流行的应用程序</span></p>

<h2><span style='font-family:宋体'>实验效果</span></h2>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>发现了</span><span lang=EN-US style='color:black'>20</span><span
style='font-family:宋体;color:black'>个</span><span lang=EN-US style='color:black'>0day</span><span
style='font-family:宋体;color:black'>漏洞</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体;
color:black'>效率分析：全路径静态分析路径呈指数增长。而针对脆弱性包络进行分析，只需要几分钟就可以完成遍历。</span></p>

<p class=MsoNormal style='text-indent:24.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

</div>

</body>

</html>
